# Coordinates -----------------------------------------------------------

start_point = p[0.1357,-0.6537,0.6805,1.3344,-2.820,0.0823]               #Starting Position

camera_position = p[0.5259,0.1088,0.5983,1.9858,-0.717,-1.7630]           #Out of view for camera
table_position = p[0.2695,-0.4347,0.1857,-0.8080,1.635,1.6873]            #Position of the table

safe_point_pickup = p[-0.4983,-0.1527,0.6241,0.4407,1.457,0.5474]         #(Safe)position of the pickup
safe_point_dropoff = p[0.4957,0.1465,0.6257,1.7825,-0.552,-1.8908]        #(Safe)position of the dropoff

pickup_point_A = p[-0.7980,-0.5481,0.5000,0.1628,1.612,0.8382]            #Position of box number 1
pickup_point_B = p[-0.9630,-0.1043,0.4980,0.5355,1.478,0.4550]            #Position of box number 2
pickup_point_C = p[-0.8638,0.4476,0.4865,0.9211,1.237,-0.0062]

dropoff_position_A = p[0.8851,-0.4686,0.4474,-1.5507,1.416,2.1406]        #Position of the drop off zone
dropoff_position_B = p[0.9145,-0.0487,0.4391,1.8646,-1.088,-2.0806]       #Position of the drop off zone
dropoff_position_C = p[0.6661,0.6305,0.4348,1.8510,-0.228,-1.5851]        #Position of the drop off zone

# Functions ------------------------------------------------------------

def getPose():
  return get_actual_tcp_pose()
end

def resetPosition():
  # Resetting robot
  movel(start_point)
end

def moveToStart():
  # Move to Start Position
  movej(start_point)
end

def moveToPickUpZone(zone):
  # Enter Safezone before continueing
  movej(safe_point_pickup)
  movePos = start_point
  if (zone == "A"):
    movePos = pickup_point_A
  elif (zone == "B"):
    movePos = pickup_point_B
  elif (zone == "C"):
    movePos = pickup_point_C
  end
  movej(movePos)
  return movePos
end

def moveToDropOffZone(zone):
  # Enter Safezone before continueing
  movej(safe_point_dropoff)
  movePos = start_point
  if (zone == "A"):
    movePos = dropoff_position_A
  elif (zone == "B"):
    movePos = dropoff_position_B
  elif (zone == "C"):
    movePos = dropoff_position_C
  end
  movej(movePos)
  return movePos
end

def moveToTable(from = "none"):
  # Move to table
  if(from == "pickup"):
    movej(safe_point_pickup)
    movej(table_position)
  elif (from == "dropoff"):
    movej(safe_point_dropoff)
    movej(table_position)
  elif (from == "none"):
    movej(table_position)
  end
  return table_position
end

def moveDown(position, distance):
  # Move down a certain distance from point
  movePos = pose_add(position, p[0,0,-(distance),0,0,0])
  movel(movePos)
  return movePos
end

def moveUp(position, distance):
  # Move down a certain distance from point
  movePos = pose_add(position, p[0,0,(distance),0,0,0])
  movel(movePos)
  return movePos
end

def glue_frame(type):
    if(type == "A" or type == "B" or type == "C"):
      corner_1 =  p[0.2132,-0.4837,0.0600,1.6505,-2.324,-1.2664]
      corner_2 =   p[0.1925,-0.9229,0.0887,1.4719,-2.499,-0.7499]
      corner_3 =  p[-0.1634,-0.9092,0.0940,0.9986,-2.820,-0.8192]
      corner_4 =  p[-0.1210,-0.4577,0.0638,1.0213,-2.379,-1.4942]

      # Taking position
      #movel(some_new_position)

      # Corner movement
      movel(corner_1)
      sleep(0.1)
      movel(corner_2)
      sleep(0.1)
      movel(corner_3)
      sleep(0.1)
      movel(corner_1)
      sleep(0.1)
      movel(corner_4)
      sleep(0.1)
      movel(corner_3)
    end
end

def handle_frame(type):
  # Move to pickup zone (A, B or C)
  movePos = moveToPickUpZone(type)
  sleep(0.1)

  # Move down
  newPos = moveDown(movePos, 0.20)
  sleep(1)

  # Move up
  moveUp(newPos, 0.20)
  sleep(0.1)

  # Move to Glue Table from Pickup zone
  movePos = moveToTable(from = "pickup")
  sleep(0.1)

  # Move down
  newPos = moveDown(movePos, 0.10)
  sleep(1)

  # Move up
  moveUp(newPos, 0.10)
  sleep(0.1)

  # Move out of camera sight
  movel(camera_position)
  sleep(3)

  # Move back to Glue Table
  moveToTable()
  sleep(0.1)

  # Glue frame (A, B or C)
  glue_frame(type)
  sleep(1)

  # Move at to Glue Table
  movePos = moveToTable()
  sleep(0.1)

  # Move down
  newPos = moveDown(movePos, 0.10)
  sleep(1)

  # Move up
  moveUp(newPos, 0.10)
  sleep(0.1)

  # Move to dropoff zone (A, B or C)
  movePos = moveToDropOffZone(type)
  sleep(0.1)

  # Move down
  newPos = moveDown(movePos, 0.20)
  sleep(1)

  # Move up
  moveUp(newPos, 0.20)
  sleep(0.1)

  # Move to Glue Table from Pickup zone
  moveToTable(from = "dropoff")
  sleep(0.1)
end

index = 0
def loop(type, count):
  index = index + 1
  if(index <= count):
    handle_frame(type)
    loop(type, count)
  end
  index = 0
end











# Start script ------------------------------------------------------------

moveToStart()
sleep(2)

# Loop frames
loop(type = "A", count = 0)
loop(type = "B", count = 0)
loop(type = "C", count = 2)

# Stop script ------------------------------------------------------------

sleep(1)
resetPosition()

# End script -------------------------------------------------------------
halt