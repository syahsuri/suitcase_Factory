# Main script
# v0.2


#Here are all the position declarations

startpoint = p[0.1357,-0.6537,0.6805,1.3344,-2.820,0.0823]                              #Starting Position

pickup_point_A = p[-0.7980,-0.5481,0.5000,0.1628,1.612,0.8382]                          #Position of box number 1
position_B = p[-0.9630,-0.1043,0.4980,0.5355,1.478,0.4550]                              #Position of the frame B pick up and drop off zone


table_position = p[0.2695,-0.4347,0.1857,-0.8080,1.635,1.6873]                          #Position of the table
camera_position = p[0.4957,0.1465,0.6257,1.7825,-0.552,-1.8908]                         #Position of out of view for camera

safe_point_pickup = p[-0.4983,-0.1527,0.6241,0.4407,1.457,0.5474]                       #(Safe)position of the pickup
safe_point_dropoff = p[0.4957,0.1465,0.6257,1.7825,-0.552,-1.8908]                      #(Safe)position of the dropoff


dropoff_positionA = p[0.8851,-0.4686,0.4474,-1.5507,1.416,2.1406]                       #Position of the drop off zone
position_C = p[0.6661,0.6305,0.4348,1.8510,-0.228,-1.5851]                              #Position of the frame C pick up and drop off zone




def SocketConnection():

    # Open a socket for receiving data (we have to configurate the parameters from it)
    port = 10000
    ip = "192.168.0.5"
    name_socket = "server"

    ### Connect to camera and return status ###
    socket = socket_open(ip, port, name_socket) 
    textmsg("Connection: ", socket)


    #2. Employee selects amounts on interface (use default values for now)(amount[])

    while True:
        textmsg("Waiting for the amount...")

        #Convert to a string array using ","              

        amount = socket_read_ascii_float(3,name_socket)     #Compulsory to receive the data with parentesis and separated with comas
        textmsg(amount)
            if length(amount) == 4:
                break
            end
    end

    #3. Employee pushes start button on interface (This starts the routine)

    # Wait until we receive start ("start") from socket
    while True:
        textmsg("Waiting for the start...")
        start_signal = socket_read_string(name_socket)
        textmsg(start_signal)
        if start_signal == "1.start":
            break
        elif start_signal == "1.Replace":
            movej(replace_position)
            while True:
                wait_okay = socket_read_string(name_socket)
                if wait_okay == "1.OK":
                    break
                end
            end
        end      
    end
    return amount
end

def moveToRest():
  # Move to Resting Position
  movej(startpoint)
end





def moveToPickUpZone(zone):

    #Move to Resting Position
    if (zone == 1):
        movej(safe_point_pickup)
        rotation_pick = pose_add(safe_point_pickup, p[0,0,0,0,0,0])             #Rotate the robot to the position of the gripper
        movej(rotation_pick)

        #Move to PickUp Zone A
        movej(pickup_point_A)
        sleep(1)
        waypoint_A = pose_add(pickup_point_A, p[0,0,-0.05,0,0,0])               #Position of frame in box number 1
        movel(waypoint_A, a=1.0, v=0.1)
        pickup_point_A = pose_add(pickup_point_A, p[0,0,-0.1,0,0,0])                     #Increase the position of the pick up for the next frame

    elif (zone == 2):
        movej(safe_point_pickup)
        rotation_pick = pose_add(safe_point_pickup, p[0,0,0,0,0,0])             #Rotate the robot to the position of the gripper
        movej(rotation_pick)

        # Move to PickUp Zone B
        movej(position_B)
        sleep(1)
        waypoint_B = pose_add(position_B, p[0,0,-0.05,0,0,0])                   #Position of frame in box number 1
        movel(waypoint_B, a=1.0, v=0.1)

    elif (zone == 3):
        movej(safe_point_dropoff)
        rotation_pick = pose_add(safe_point_dropoff, p[0,0,0,0,0,0])            #Rotate the robot to the position of the gripper
        movej(rotation_pick)

        # Move to PickUp Zone C
        movej(position_C)
        sleep(1)
        waypoint_C = pose_add(position_C, p[0,0,-0.05,0,0,0])                   #Position of frame in box number 1
        movel(waypoint_C, a=1.0, v=0.1)
    end
end

def moveToGlueZone():
    movej(safe_point_pickup)
    movej(table_position)
    sleep(1) 
end

def PickUp():

    movej(safe_point_pickup)                                                 #Go back to the starting point
    #set_digital_out(0, False)                                               #Make sure its open

    rotation_pick = pose_add(safe_point_pickup, p[0,0,0,0,0,0])              #Rotate the robot to the position of the gripper
    movej(rotation_pick)

    movej(table_position)		                                             #Go to pick up position
    sleep(1)
    #Pick up the frame
    #set_digital_out(0, True) 
end

def moveToDropZone(zone):
  # Move to Resting Position
  if zone == 1:

    # Move to PickUp Zone A
      movej(safe_point_dropoff)   
      movej(dropoff_positionA)                                              #Go to drop off position A
      sleep(1)
      waypoint_DA = pose_add(dropoff_positionA, p[0,0,-0.05,0,0,0])         #Position of frame in box number 1
      movel(waypoint_DA, a=1.0, v=0.1)
      
      #Drop off the frame
      #set_digital_out(0, False)
      

  elif zone == 2:
    # Move to PickUp Zone B
      movej(safe_point_pickup)
      movej(position_B)                                                     #Go to drop off position B
      sleep(1)
      waypoint_DB = pose_add(position_B, p[0,0,-0.05,0,0,0])                #Position of frame in box number 2
      movel(waypoint_DB, a=1.0, v=0.1)
      
      #Drop off the frame
      #set_digital_out(0, False)
      position_B = pose_add(position_B, p[1,0,0,0,0,0])                     #Increase the position of the pick up for the next frame

  elif zone == 3:
    # Move to PickUp Zone C 
      movej(safe_point_dropoff)
      movej(position_C)                                                     #Go to drop off position C
      sleep(1)
      #Hello
      waypoint_DC = pose_add(position_C, p[0,0,-0.05,0,0,0])                #Position of frame in box number 3
      movel(waypoint_DC, a=1.0, v=0.1)
      
      #Drop off the frame
      #set_digital_out(0, False)
      position_C = pose_add(position_C, p[1,0,0,0,0,0])                     #Increase the position of the pick up for the next frame
    end
end



def glue_frameA():
   
   #GLUING PART OF FRAME A

   #8. Move out of frame (Away for the camera for it to scan properly)
   movej(camera_position, a=1.0, v=0.1)
   rotation_glue = pose_add(camera_position, p[0,0,0,0,0,0])         #Rotate the robot to the position of the gluing
   movej(rotation_glue)

   #Send a signal to the vision part to start scanning
   #socket_send_string("0:scanA", name_socket ) #Add type frame to message


   #8b. Glue
   #First we have to locate and receive the height and length form the vision part, Open CV (named size[])

    #while True:

        #sizes = socket_read_ascii_float(2,name_socket)               #Compulsory to receive the data with parentesis and separated with comas
        #textmsg(sizes)

        #if length(sizes) == 3
            #break  
        #end
    #end    

    sizes = [2,45,30]
    if length(sizes) == 3:   


        #Create the four waypoints


        corner_1A = pose_add(table_position, p[sizes[1],0,0,0,0,0])        #These must be the coordinates of the second corner
        corner_2A = pose_add(corner_1A, p[0, sizes[2],0,0,0,0])            #These must be the coordinates of the third corner
        corner_3A = pose_add(corner_2A, p[-sizes[1],0,0,0,0,0])            #These must be the coordinates of the fourth corner
        corner_4A = pose_add(corner_3A, p[0,-sizes[2],0,0,0,0])            #These must be the coordinates of the initial corner

        #Move to the 4 waypoints while gluing (the corners must not be glued)

        movej(table_position, a=1.0, v=0.1)

        #Start Gluing
        #wait(the corners must not be glued)            #these three tasks have to be done while moving to the second corner!
        #Stop Glue
        movel(corner_1A, a=1.0, v=0.1)

        #Start Gluing
        #wait(the corners must not be glued)            #these three tasks have to be done while moving to the third corner!
        #Stop Glue
        movel(corner_2A, a=1.0, v=0.1)

        #Start Gluing 
        #wait(the corners must not be glued)            #these three tasks have to be done while moving to the fourth corner!    
        #Stop Glue
        movel(corner_3A, a=1.0, v=0.1)

        #Start Gluing 
        #wait(the corners must not be glued)            #these three tasks have to be done while moving to the initial corner!    
        #Stop Glue
        movel(corner_4A, a=1.0, v=0.1)

   
    else:
        textmsg("Error receiving coordinates.")
    end
end






def glue_frameB():
   #GLUING PART OF FRAME B


   #8. Move out of frame (Away for the camera for it to scan properly)
    movej(camera_position, a=1.0, v=0.1)
    rotation_glue = pose_add(camera_position, p[0,0,0,0,0,0])         #Rotate the robot to the position of the gluing
    movej(rotation_glue)

   #Send a signal to the vision part to start scanning
   #socket_send_string("0:scanB", name_socket ) #Add type frame to message


   #8b. Glue
   #First we have to locate and receive the height and length form the vision part, Open CV (named size[])

    #while True:

        #sizes = socket_read_ascii_float(2,name_socket)               #Compulsory to receive the data with parentesis and separated with comas
        #textmsg(sizes)
       
        #if length(sizes) == 3
            #break  
        #end
    #end

    sizes = [2,45,30]
    if length(sizes) == 3:
        #First move to the starting gluing point and create the three waypoints

        movej(table_position, a=1.0, v=0.1)
        corner_1B = pose_add(table_position, p[sizes[1],0,0,0,0,0])      #These must be the coordinates of the second corner

        


        #Start Gluing
        #wait(the corners must not be glued)                                  #these three tasks have to be done while moving to the second corner!
        #Stop Glue
        movel(corner_1B, a=1.0, v=0.1)

        #Rotate the end of arm
        waypoint_armB = pose_add(corner_1B, p[0,0,0,0,0,0])                   #Rotate to the posicion needed (always the same)
        movej(waypoint_armB, a=1.0, v=0.1)

        corner_2B = pose_add(waypoint_armB, p[-sizes[1],0,0,0,0,0])      #These must be the coordinates of the third corner

        #Start Gluing
        #wait(the corners must not be glued)                                  #these three tasks have to be done while moving to the third corner!
        #Stop Glue
        movel(corner_2B, a=1.0, v=0.1)

        corner_3B = pose_add(corner_2B, p[0,sizes[2],0,0,0,0])           #These must be the coordinates of the fourth corner

        #Start Gluing
        #wait(the corners must not be glued)                                  #these three tasks have to be done while moving to the second corner!
        #Stop Glue
        movel(corner_3B, a=1.0, v=0.1)

        #Rotate the end of arm
        waypoint_arm_finalB = pose_add(corner_3B, p[0,0,0,0,0,0])             #Rotate to the posicion needed (always the same)
        movej(waypoint_arm_finalB, a=1.0, v=0.1)

        corner_4B = pose_add(waypoint_arm_finalB, p[0,-sizes[2],0,0,0,0])      #These must be the coordinates of the fourth corner

        #Start Gluing
        #wait(the corners must not be glued)                                        #these three tasks have to be done while moving to the first corner!
        #Stop Glue
        movel(corner_4B, a=1.0, v=0.1)

   
    else:
        textmsg("Error receiving coordinates.")
    end
end
   





def glue_frameC():
   #GLUING PART OF FRAME C

    #8. Move out of frame (Away for the camera for it to scan properly)
    movej(camera_position, a=1.0, v=0.1)
    rotation_glue = pose_add(camera_position, p[0,0,0,0,0,0])         #Rotate the robot to the position of the gluing
    movej(rotation_glue)

    #Send a signal to the vision part to start scanning
    #socket_send_string("0:scanC", name_socket ) #Add type frame to message


    #8b. Glue
    #First we have to locate and receive the height and length form the vision part, Open CV (named size[])

    #while True:

        #sizes = socket_read_ascii_float(2,name_socket)               #Compulsory to receive the data with parentesis and separated with comas
        #textmsg(sizes)
        
        #if length(sizes) == 3
            #break  
        #end
    #end

    sizes = [2,45,30]
    if length(sizes) == 3:  
    
        movej(table_position, a=1.0, v=0.1)

        
        #Rotate the end of arm
        waypoint_armC = pose_add(table_position, p[0,0,0,0,0,0])            #Rotate to the posicion needed (always the same)
        movej(waypoint_armC, a=1.0, v=0.1)

        corner_1C = pose_add(waypoint_armC, p[sizes[1],0,0,0,0,0])      #These must be the coordinates of the second corner
        #Start Gluing
        #wait(the corners must not be glued)                                #these three tasks have to be done while moving to the second corner!
        #Stop Glue
        movel(corner_1C, a=1.0, v=0.1)

        corner_2C = pose_add(corner_1C, p[0, sizes[2],0,0,0,0])        #These must be the coordinates of the third corner

        #Start Gluing
        #wait(the corners must not be glued)                                #these three tasks have to be done while moving to the third corner!
        #Stop Glue
        movel(corner_2C, a=1.0, v=0.1)

        #Rotate the end of arm to the initial position
        corner_3C = pose_add(corner_2C, p[0,0,0,0,0,0])
        movej(corner_3C, a=1.0, v=0.1)


    else:
        textmsg("Error receiving coordinates.") 
    end

end



def process(amount):

  #4. Robot moves to pickup zone (A, B, and C)
    if (to_num(amount[1])) != 0 :
        i= 0

        while i< (to_num(amount[1])):

            #set_digital_out(0, False) # Make sure its open

            moveToPickUpZone(1)
            
            #5. Pick up frame (from first fixed point, then move with a loop to the next x amount)
            #set_digital_out(0, True)

            #6. Move to working zone (The glueing area)
            moveToGlueZone()
            
            #7.a Drop the frame in the right position (where the piston will hold it down, dont let go yet)
            #set_digital_out(0, False)
            

            #Go to function which does the glue part of the frame A
            glue_frameA()

            #Pick up from the table
            PickUp()

            #10. Move the frame to the drop-off zone
            moveToDropZone(1)


            i = i+1
        end
        pickup_point_A = p[-0.7980,-0.5481,0.5000,0.1628,1.612,0.8382]              #After doing the whole while restart the initial position of the pick of frames B
    end        


    if (to_num(amount[2])) != 0 :

        j= 0
        while i< (to_num(amount[2])):

            #set_digital_out(0, False) # Make sure its open

            moveToPickUpZone(2)
            
            #5. Pick up frame (from first fixed point, then move with a loop to the next x amount)
            #set_digital_out(0, True)

            #6. Move to working zone (The glueing area)
            moveToGlueZone()
            
            #7.Drop the frame in the right position (where the piston will hold it down, dont let go yet)
            #set_digital_out(0, False)
            

            #Go to function which does the glue part of the frame A
            glue_frameB()

            #Pick up from the table
            PickUp()

            #10. Move the frame to the drop-off zone
            moveToDropZone(2)
            
            
            j = j+1
        end
        position_B = p[-0.9630,-0.1043,0.4980,0.5355,1.478,0.4550]              #After doing the whole while restart the initial position of the pick of frames B
    end    

    if (to_num(amount[3])) != 0 :

        d= 0
        while d< (to_num(amount[3])):

            #set_digital_out(0, False) # Make sure its open

            moveToPickUpZone(3)
            
            #5. Pick up frame (from first fixed point, then move with a loop to the next x amount)
            #set_digital_out(0, True)

            #6. Move to working zone (The glueing area)
            moveToGlueZone()
            
            #7.Drop the frame in the right position (where the piston will hold it down, dont let go yet)
            #set_digital_out(0, False)
           

            #Go to function which does the glue part of the frame A
            glue_frameC()

            #Pick up from the table
            PickUp()

            #10. Move the frame to the drop-off zone
            moveToDropZone(3)
            
            d = d+1
        end
        position_C = p[0.6661,0.6305,0.4348,1.8510,-0.228,-1.5851]                  #After doing the whole while restart the initial position of the pick of frames C
    end        

end


#----------------------------------MAIN PROGRAM--------------------------------------------

#1. Move the robot to a startposition (Backwards)
moveToRest()


#2. Employee selects amounts on interface (use default values for now)(amount[])


#amount = SocketConnection()
amount = [3,1,1,1]
process(amount)
moveToRest()

textmsg("No more frames to glue")  #Maybe send it through the interface
#socket_send_string("No more frames to glue", name_socket)
#socket_close(name_socket)

halt