# Marcos general sketch test

#############socket_read_ascii_float(number, socket name=’socket 0’)

#Here are all the position declarations

var startpoint = p[0.1559,-0.4109,0.1977,1.2879,-2.641,0.4935]                           #Starting Position
var waypoint_1 = p[-1.0552,-0.6412,0.2091,-0.3620,-3.112,0.622]                          #Position of box number 1
var waypoint_2 = p[-1.2242,-0.1807,0.1587,0.9690,2.967,-0.0392]                          #Position of box number 2
var waypoint_3 = p[-1.0765,0.6216,0.1525,1.8989,2.496,-0.0476]                           #Position of box number 3
var table_position = p[-0.4474,-0.7234,0.2613,-0.2796,3.129,-0.0219]                     #Position of the table
var precised_table_position = p[0.1796,-0.6869,0.1305,-1.4154,2.755,0.1192]
var frame_position = p[0,0,0,0,0,0]
var dropoff_positionA = p[1.0610,-0.6817,0.1624,-2.4354,1.941,-0.0209]                    #Position of the drop off zone
var dropoff_positionB = p[1.2027,0.1867,0.1477,-2.9589,0.957,-0.0194]                    #Position of the drop off zone
var dropoff_positionC =  p[0.6661,0.6305,0.4348,1.8510,-0.228,-1.5851]                     #Position of the drop off zone



#1. Move the robot to a startposition (Backwards)
moveToRest()


#2. Employee selects amounts on interface (use default values for now)(amount[])

# Open a socket for receiving data (we have to configurate the parameters from it)
port = 10000
ip = "0.0.0.0"
name_socket = "Robot"

### Connect to camera and return status ###
socket = socket_open(ip, port, name_socket) 

#2. Employee selects amounts on interface (use default values for now)(amount[])

while True:
    data = socket_read_string(name_socket)
    amount = str_split(data, ",")  # Convert to a string array using ","
    if len(amount) == 3:
        break

#3. Employee pushes start button on interface (This starts the routine)

# Wait until we receive start ("start") from socket
while True:
    start_signal = socket_read_string(name_socket)
    if start_signal == "2:start":
        break  


process()
moveToRest()

textmsg("No more frames to glue")  #Maybe send it through the interface
socket_send_string("No more frames to glue", name_socket)
socket_close(name_socket)

#Go to task 2 again

end



def process(amount):

  #4. Robot moves to pickup zone (A, B, and C)
  if str2num(amount[0]) != 0 :

    i= 0
    while i< str2num(amount[0])

        set_digital_out(0, False) # Make sure its open

        moveToPickUpZone(1)
        
        #5. Pick up frame (from first fixed point, then move with a loop to the next x amount)
        set_digital_out(0, True)

        #6. Move to working zone (The glueing area)
        moveToGlueZone()
        
        #7.a Drop the frame in the right position (where the piston will hold it down, dont let go yet)
        set_digital_out(0, False)
        #7.b The pistons will hold it down

        #Go to function which does the glue part of the frame A
        glue_frameA()

        #Pick up from the table
        PickUp()

        #10. Move the frame to the drop-off zone
        moveToDropZone(1)


        i = i+1


  if str2num(amount[1]) != 0 :

    j= 0
    while i< str2num(amount[1])

        set_digital_out(0, False) # Make sure its open

        moveToPickUpZone(2)
        
        #5. Pick up frame (from first fixed point, then move with a loop to the next x amount)
        set_digital_out(0, True)

        #6. Move to working zone (The glueing area)
        moveToGlueZone()
        
        #7.a Drop the frame in the right position (where the piston will hold it down, dont let go yet)
        set_digital_out(0, False)
        #7.b The pistons will hold it down

        #Go to function which does the glue part of the frame A
        glue_frameB()

        #Pick up from the table
        PickUp()

        #10. Move the frame to the drop-off zone
        moveToDropZone(2)
        
        
        j = j+1

  if str2num(amount[2]) != 0 :

    d= 0
    while d< str2num(amount[2])

        set_digital_out(0, False) # Make sure its open

        moveToPickUpZone(3)
        
        #5. Pick up frame (from first fixed point, then move with a loop to the next x amount)
        set_digital_out(0, True)

        #6. Move to working zone (The glueing area)
        moveToGlueZone()
        
        #7.a Drop the frame in the right position (where the piston will hold it down, dont let go yet)
        set_digital_out(0, False)
        #7.b The pistons will hold it down

        #Go to function which does the glue part of the frame A
        glue_frameC()

        #Pick up from the table
        PickUp()

        #10. Move the frame to the drop-off zone
        moveToDropZone(3)
        
        d = d+1

end





def moveToRest():
  # Move to Resting Position
  movej(startpoint)
end


def moveToPickUpZone(zone):
  # Move to Resting Position
  if (zone == 1):
    # Move to PickUp Zone A
      movej(waypoint_1)
      sleep(1)
      waypoint_A = pose_add(waypoint_1, p[0,0,-1,0,0,0])      #Position of frame in box number 1
      movel(waypoint_A, a=1.0, v=0.1)

  elif zone == 2:
    # Move to PickUp Zone B
      movej(waypoint_2)
      sleep(1)
      waypoint_B = pose_add(waypoint_2, p[0,0,-1,0,0,0])      #Position of frame in box number 1
      movel(waypoint_B, a=1.0, v=0.1)
  elif zone == 3:
    # Move to PickUp Zone C
      movej(waypoint_3)
      sleep(1)
      waypoint_C = pose_add(waypoint_3, p[0,0,-1,0,0,0])      #Position of frame in box number 1
      movel(waypoint_C, a=1.0, v=0.1)
  end
end

def moveToGlueZone(safe):
  if safe:
    movej(table_position)
    sleep(1)
   movel(precise_table_position, a=1.0, v=0.1)
  
end

def moveToDropZone(zone):
  # Move to Resting Position
  if zone == 1:

    # Move to PickUp Zone A 
      movej(dropoff_positionA)                                        #Go to drop off position A
      sleep(1)
      waypoint_DA = pose_add(dropoff_positionA, p[0,0,-1,0,0,0])      #Position of frame in box number 1
      movel(waypoint_DA, a=1.0, v=0.1)
      #Drop off the frame
      set_digital_out(0, False)

  elif zone == 2:
    # Move to PickUp Zone B
      movej(dropoff_positionB)                                        #Go to drop off position A
      sleep(1)
      waypoint_DB = pose_add(dropoff_positionB, p[0,0,-1,0,0,0])      #Position of frame in box number 1
      movel(waypoint_DB, a=1.0, v=0.1)
      #Drop off the frame
      set_digital_out(0, False)
  elif zone == 3:
    # Move to PickUp Zone C 
      movej(dropoff_positionC)                                        #Go to drop off position A
      sleep(1)
      waypoint_DA = pose_add(dropoff_positionC, p[0,0,-1,0,0,0])      #Position of frame in box number 1
      movel(waypoint_DC, a=1.0, v=0.1)
      #Drop off the frame
      set_digital_out(0, False)
    return
end

def PickUp():

   movej(startpoint)                                                 #Go back to the starting point
   set_digital_out(0, False)                                         #Make sure its open

   movej(table_position)		                                       #Go to pick up position
   sleep(1)
   movej(precise_table_position, a=1.0, v=0.1)
   #Pick up the frame
   set_digital_out(0, True) 
end

def glue_frameA():
   
   #GLUING PART OF FRAME A

   #8. Move out of frame (Away for the camera for it to scan properly)
   movel(startpoint, a=1.0, v=0.1)

   #Send a signal to the vision part to start scanning
   socket_send_string("0:scanA", name_socket ) #Add type frame to message


   #8b. Glue
   #First we have to locate and receive the height and length form the vision part, Open CV (named size[])

   while True:
    size = socket_read_string(name_socket)
    textmsg(size)
    size_array = str_split(size, ",")
    if size_array:
        break  

   if len(size_array) == 2:   


      #Create the four waypoints
   
      
      corner_1 = pose_add(corner_1, p[size_array[0],0,0,0,0,0])      #These must be the coordinates of the second corner
      corner_2 = pose_add(corner_2, p[0, size_array[1],0,0,0,0])      #These must be the coordinates of the third corner
      corner_3 = pose_add(corner_3, p[-size_array[0],0,0,0,0,0])      #These must be the coordinates of the fourth corner
      corner_4 = pose_add(corner_3, p[0,-size_array[1],0,0,0,0])      #These must be the coordinates of the fourth corner

      #Move to the 4 waypoints while gluing (the corners must not be glued)

      movej(frame_position, a=1.0, v=0.1)

      #Start Gluing
      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the second corner!
      #Stop Glue
      movel(corner_1, a=1.0, v=0.1)

      #Start Gluing
      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the third corner!
      #Stop Glue
      movel(corner_2, a=1.0, v=0.1)

      #Start Gluing 
      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the fourth corner!    
      #Stop Glue
      movel(corner_3, a=1.0, v=0.1)

      #Start Gluing 
      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the initial corner!    
      #Stop Glue
      movel(corner_4, a=1.0, v=0.1)

   
   else:
    textmsg("Error receiving coordinates.")
end







def glue_frameB():
   #GLUING PART OF FRAME B

   #7.c The robot arm can let go and move up.
   #8. Move out of frame (Away for the camera for it to scan properly)
   movel(startpoint, a=1.0, v=0.1)

   #Send a signal to the vision part to start scanning
   socket_send_string("0:scanB", name_socket )

   #8b. Glue
   #First we have to locate and receive the four corners form the vision part, Cognex or Open CV (named coordinates[])

   
   while True:
    size = socket_read_string(name_socket)
    textmsg(size)
    size_array = str_split(size, ",")
    if size_array:
        break  

   if len(size_array) == 2:
      #Create the three waypoints
      
      corner_1 = pose_add(corner_1, p[size_array[0],0,0,0,0,0])      #These must be the coordinates of the second corner
      corner_2 = pose_add(corner_2, p[0, size_array[1],0,0,0,0])      #These must be the coordinates of the third corner
      corner_3 = pose_add(corner_2, p[0,-size_array[1],0,0,0,0])      #These must be the coordinates of the fourth corner
      corner_4 = pose_add(corner_3, p[-size_array[0],0,0,0,0,0])      #These must be the coordinates of the fourth corner

      movej(frame_position, a=1.0, v=0.1)


      #Start Gluing
      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the second corner!
      #Stop Glue
      movel(corner_1, a=1.0, v=0.1)

      #Start Gluing
      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the third corner!
      #Stop Glue
      movel(corner_2, a=1.0, v=0.1)

      #Rotate the end of arm
      waypoint_arm = pose_add(corner_2, p[0,0,0,0,0,0])      #Rotate to the posicion needed (always the same)
      movel(waypoint_arm, a=1.0, v=0.1)

      #Start Gluing
      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the second corner!
      #Stop Glue
      movel(corner_3, a=1.0, v=0.1)

      #Start Gluing
      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the first corner!
      #Stop Glue
      movel(corner_4, a=1.0, v=0.1)

   
   else:
    textmsg("Error receiving coordinates.")
end
   





def glue_frameC():
   #GLUING PART OF FRAME C

   #7.c The robot arm can let go and move up.
   #8. Move out of frame (Away for the camera for it to scan properly)
   movel(startpoint, a=1.0, v=0.1)

   #Send a signal to the vision part to start scanning
   socket_send_string("0:scanC", name_socket )


   #8b. Glue
   #First we have to locate and receive the four corners form the vision part, Cognex or Open CV (named coordinates[])

   while True:
    size = socket_read_string(name_socket)
    textmsg(size)
    size_array = str_split(size, ",")
    if size_array:
        break  

   if len(size_array) == 2:  

      #Create the three waypoints
   
      corner_1 = pose_add(corner_1, p[size_array[0],0,0,0,0,0])      #These must be the coordinates of the second corner
      corner_2 = pose_add(corner_2, p[0, size_array[1],0,0,0,0])      #These must be the coordinates of the third corner
      
   
      movej(frame_position, a=1.0, v=0.1)

      
      #Rotate the end of arm
      waypoint_arm = pose_add(corner_1, p[0,0,0,0,0,0])     #Rotate to the posicion needed (always the same)
      movel(waypoint_arm, a=1.0, v=0.1)

      #Start Gluing
      #wait(the corners must not be glued)                  #these three tasks have to be done while moving to the second corner!
      #Stop Glue
      movel(corner_1, a=1.0, v=0.1)



      #Start Gluing
      #wait(the corners must not be glued)                  #these three tasks have to be done while moving to the third corner!
      #Stop Glue
      movel(corner_2, a=1.0, v=0.1)


   else:
    textmsg("Error receiving coordinates.") 

end