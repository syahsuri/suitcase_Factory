# Marcos general sketch test


#1. Move the robot to a startposition (Backwards)

var startpoint = p[0.5, -0.3, 0.2, 2.22, -1.53, 0]       #Starting position (invented)
movel(startpoint, a=1.0, v=0.1)


var waypoint_1 = p[0,0,0,0,0,0]                          #Position of box number 1
var waypoint_2 = p[0,0,0,0,0,0]                          #Position of box number 2
var waypoint_3 = p[0,0,0,0,0,0]                          #Position of box number 3
var table_position = p[0,0,0,0,0,0]                      #Position of the table
var dropoff_positionA = p[0,0,0,0,0,0]                    #Position of the drop off zone
var dropoff_positionB = p[0,0,0,0,0,0]                    #Position of the drop off zone
var dropoff_positionC = p[0,0,0,0,0,0]                    #Position of the drop off zone


# Open a socket for receiving data (we have to configurate the parameters from it)
socket_open("name_socket", "TCP", "IP_SERVER", PORT)

#2. Employee selects amounts on interface (use default values for now)(amount[])

while True:
    data = socket_read_string("name_socket")
    amount = str_split(data, ",")  # Convert to a string array using ","
    if len(amount) == 3:
        break


#3. Employee pushes start button on interface (This starts the routine)


# Wait until we receive start ("start") from socket
while True:
    start_signal = socket_read_string("name_socket")
    if start_signal == "start":
        break                                             #Go out from the loop when receiving "start"



#4. Robot moves to pickup zone (A, B, and C)
if str2num(amount[0]) != 0 :

   i= 0
   while i< str2num(amount[0])
      set_digital_out(0, False) # Make sure its open
      movel(waypoint_1, a=1.0, v=0.1)
      waypoint_A = pose_add(waypoint_1, p[0,0,-1,0,0,0])      #Position of frame in box number 1
      movel(waypoint_A, a=1.0, v=0.1)
      
      #5. Pick up frame (from first fixed point, then move with a loop to the next x amount)
      set_digital_out(0, True)



      #6. Move to working zone (The glueing area)
      
      movel(table_position, a=1.0, v=0.1)
      movel(precise_table_position, a=1.0, v=0.1)

      
      #7.a Drop the frame in the right position (where the piston will hold it down, dont let go yet)
      set_digital_out(0, False)
      #7.b The pistons will hold it down



      #GOTO GLUE PART OF FRAME A
      glue_frameA()

      i = i+1


if str2num(amount[1]) != 0 :

   j= 0
   while i< str2num(amount[1])
      set_digital_out(0, False) # Make sure its open
      movel(waypoint_2, a=1.0, v=0.1)
      waypoint_B = pose_add(waypoint_2, p[0,0,-1,0,0,0])      #Position of frame in box number 1
      movel(waypoint_B, a=1.0, v=0.1)

      #5. Pick up frame (from first fixed point, then move with a loop to the next x amount)
      set_digital_out(0, True)



      #6. Move to working zone (The glueing area)
      
      movel(table_position, a=1.0, v=0.1)
      movel(precise_table_position, a=1.0, v=0.1)

      #7.a Drop the frame in the right position (where the piston will hold it down, dont let go yet)
      set_digital_out(0, False)
      #7.b The piston clamps will hold it down



      #GOTO GLUE PART OF FRAME B
      glue_frameB()
      
      j = j+1

if str2num(amount[2]) != 0 :

   d= 0
   while d< str2num(amount[2])
      set_digital_out(0, False) # Make sure its open
      movel(waypoint_3, a=1.0, v=0.1)
      waypoint_C = pose_add(waypoint_3, p[0,0,-1,0,0,0])      #Position of frame in box number 1
      movel(waypoint_C, a=1.0, v=0.1)

      #5. Pick up frame (from first fixed point, then move with a loop to the next x amount)
      set_digital_out(0, True)



      #6. Move to working zone (The glueing area)
      
      movel(table_position, a=1.0, v=0.1)
      movel(precise_table_position, a=1.0, v=0.1)

      #7.a Drop the frame in the right position (where the piston will hold it down, dont let go yet)
      set_digital_out(0, False)
      #7.b The piston clamps will hold it down



      #GOTO GLUE PART OF FRAME C
      glue_frameC()
      
      d = d+1



textmsg("No more frames to glue")
socket_close("name_socket")

#go to task 2















def glue_frameA():
   
   #GLUING PART OF FRAME A

   #7.c The robot arm can let go and move up.
   #8. Move out of frame (Away for the camera for it to scan properly)
   movel(startpoint, a=1.0, v=0.1)

   #Send a signal to the vision part to start scanning
   socket_send_string("name_socket", "scanA") #Add type frame to message


   #8b. Glue
   #First we have to locate and receive the four corners form the vision part, Cognex or Open CV (named coordinates[])


   while True:
    coordinates = socket_read_string("name_socket")
    if coordinates:
        break

   



   if len(coordinates) == 4:
    
      #Create the four waypoints
   
      corner_1 = p(coordinates[0])      #These must be the coordinates of the first corner          #is it OK this format?
      corner_2 = p(coordinates[1])      #These must be the coordinates of the second corner
      corner_3 = p(coordinates[2])      #These must be the coordinates of the third corner
      corner_4 = p(coordinates[3])      #These must be the coordinates of the fourth corner

      #Move to the 4 waypoints while gluing (the corners must not be glued)

      movel(corner_1, a=1.0, v=0.1)


      #Start Gluing

      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the second corner!
      #Stop Glue
      movel(corner_2, a=1.0, v=0.1)



      #Start Gluing
      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the third corner!
      #Stop Glue
      movel(corner_3, a=1.0, v=0.1)

      #Start Gluing 
      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the fourth corner!    
      #Stop Glue
      movel(corner_4, a=1.0, v=0.1)

      movel(startpoint, a=1.0, v=0.1)                 #Go back to the starting point
      set_digital_out(0, False) # Make sure its open

      movel(table_position, a=1.0, v=0.1)		         #Go to pick up position
      movel(precise_table_position, a=1.0, v=0.1)

      #Pick up the frame
      set_digital_out(0, True) 
   
      #10. Move the frame to the drop-off zone 
      movel(dropoff_positionA, a=1.0, v=0.1)           #Go to drop off position A
      waypoint_DA = pose_add(dropoff_positionA, p[0,0,-1,0,0,0])      #Position of frame in box number 1
      movel(waypoint_DA, a=1.0, v=0.1)
      #Drop off the frame
      set_digital_out(0, False)

    
   else:
    textmsg("Error receiving coordinates.")








def glue_frameB():
   #GLUING PART OF FRAME B

   #7.c The robot arm can let go and move up.
   #8. Move out of frame (Away for the camera for it to scan properly)
   movel(startpoint, a=1.0, v=0.1)

   #Send a signal to the vision part to start scanning
   socket_send_string("name_socket", "scanB")

   #8b. Glue
   #First we have to locate and receive the four corners form the vision part, Cognex or Open CV (named coordinates[])

   while True:
    coordinates = socket_read_string("name_socket")
    if coordinates:
        break

   if len(coordinates) == 3:
      #Create the three waypoints
      
      corner_1 = p(coordinates[0])     #These must be the coordinates of the first corner          #is it OK this format?
      corner_2 = p(coordinates[1])      #These must be the coordinates of the second corner
      corner_3 = p(coordinates[2])     #These must be the coordinates of the third corner

      movel(corner_1, a=1.0, v=0.1)


      #Start Gluing
      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the second corner!
      #Stop Glue
      movel(corner_2, a=1.0, v=0.1)



      #Start Gluing
      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the third corner!
      #Stop Glue
      movel(corner_3, a=1.0, v=0.1)

      #Rotate the end of arm
      waypoint_arm = pose_add(corner_3, p[0,0,0,0,0,0])      #Rotate to the posicion needed (always the same)
      movel(waypoint_C, a=1.0, v=0.1)

      #Start Gluing
      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the second corner!
      #Stop Glue
      movel(corner_2, a=1.0, v=0.1)

      #Start Gluing
      #wait(the corners must not be glued)            #these three tasks have to be done while moving to the first corner!
      #Stop Glue
      movel(corner_1, a=1.0, v=0.1)


      movel(startpoint, a=1.0, v=0.1)                 #Go back to the starting point
      set_digital_out(0, False)

      movel(table_position, a=1.0, v=0.1)		         #Go to pick up position
      movel(precise_table_position, a=1.0, v=0.1)

      #Pick up the frame
      set_digital_out(0, True)
      #10. Move the frame to the drop-off zone 
      movel(dropoff_positionB, a=1.0, v=0.1)           #Go to drop off position B
      waypoint_DB = pose_add(dropoff_positionB, p[0,0,-1,0,0,0])      #Position of frame in box number 1
      movel(waypoint_DB, a=1.0, v=0.1)
      #Drop off the frame
      set_digital_out(0, False)

   
   else:
    textmsg("Error receiving coordinates.")

   





def glue_frameC():
   #GLUING PART OF FRAME C

   #7.c The robot arm can let go and move up.
   #8. Move out of frame (Away for the camera for it to scan properly)
   movel(startpoint, a=1.0, v=0.1)

   #Send a signal to the vision part to start scanning
   socket_send_string("name_socket", "scanC")


   #8b. Glue
   #First we have to locate and receive the four corners form the vision part, Cognex or Open CV (named coordinates[])

   while True:
    coordinates = socket_read_string("name_socket")
    if coordinates:
        break
  




   if len(coordinates) == 3:  

      #Create the three waypoints
   
      corner_1 = p(coordinates[0])     #These must be the coordinates of the first corner          #is it OK this format?
      corner_2 = p(coordinates[1])     #These must be the coordinates of the second corner
      corner_3 = p(coordinates[2])     #These must be the coordinates of the third corner 
   
      movel(corner_1, a=1.0, v=0.1)

      
      #Rotate the end of arm
      waypoint_arm = pose_add(corner_1, p[0,0,0,0,0,0])     #Rotate to the posicion needed (always the same)
      movel(waypoint_C, a=1.0, v=0.1)

      #Start Gluing
      #wait(the corners must not be glued)                  #these three tasks have to be done while moving to the second corner!
      #Stop Glue
      movel(corner_2, a=1.0, v=0.1)



      #Start Gluing
      #wait(the corners must not be glued)                  #these three tasks have to be done while moving to the third corner!
      #Stop Glue
      movel(corner_3, a=1.0, v=0.1)


   
      movel(startpoint, a=1.0, v=0.1)                       #Go back to the starting point
      set_digital_out(0, False) # Make sure its open

      movel(table_position, a=1.0, v=0.1)		               #Go to pick up position
      movel(precise_table_position, a=1.0, v=0.1)

      #Pick up the frame
      set_digital_out(0, True) 
      #10. Move the frame to the drop-off zone 
      movel(dropoff_positionC, a=1.0, v=0.1)                 #Go to drop off position C
      waypoint_DC = pose_add(dropoff_positionC, p[0,0,-1,0,0,0])      #Position of frame in box number 1
      movel(waypoint_DC, a=1.0, v=0.1)
      #Drop off the frame
      set_digital_out(0, False)

   else:
    textmsg("Error receiving coordinates.") 

